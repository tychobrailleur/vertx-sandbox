#+AUTHOR: Sébastien Le Callonnec
#+TITLE: README

Experimenting with worker verticles in Vert.x 2.1.4.

* Starting server

Compile the code using Maven:

#+BEGIN_SRC
mvn package
#+END_SRC

Once it's packaged, go into the =target/classes= folder, and run the
following command (making sure Vert.x 2.1.4 is on the =PATH=):

#+BEGIN_SRC bash
vertx run MainVerticle -cluster
#+END_SRC

** Change the worker thread pool size

#+BEGIN_SRC bash
export JAVA_OPTS="-Dvertx.pool.worker.size=2"
#+END_SRC

* Sending Message

Making sure Vert.x 2.1.4 is on the =PATH=, the client can be executed
as follow:

#+BEGIN_SRC bash
vertx run send_message.rb -cluster
#+END_SRC

* Worker Verticle Behaviour

By default, an instance of a worker won't process any further worker
until that instance has completed its work in the thread pool.  When a
message comes in, an available worker instance is taken from the group
of instances.

This means there cannot be more than _n_ worker instances running in
parallel, _n_ being the =vertx.pool.worker.size=.

To ensure a worker can process multiple requests in parallel (i.e. by
more than one thread at a time in the background pool), it has to be
deployed with the =multi-threaded= flag set to =true=.

* License

(c) 2017 Sébastien Le Callonnec — licensed under GPLv3.
